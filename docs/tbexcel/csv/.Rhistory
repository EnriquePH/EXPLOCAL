# Remove legend title
theme(legend.title = element_blank())
library(ggplot2)
OEIS_bFile <- function(seq){
# Returns the bFile name associated to a OEIS sequence
#
# Args:
#   seq: OEIS sequence Id, consist on the letter A and 6 digits
#
# Returns:
#    A string with the OEIS' bFile name.
return(paste("b", substr(seq, 2, nchar(seq)), ".txt", sep = ""))
}
OEIS_sequence_url <- function(seq, bFile = FALSE){
# Returns bFile or sequence url in OEIS
#
# Args:
#   seq: OEIS sequence Id
#   bFile: if TRUE returns bfile url, and sequence url otherwise
#
# Returns:
#    A string with the OEIS url required
OEIS_url <- "http://oeis.org"
if(bFile){
# bFile url
return(paste(OEIS_url, seq, OEIS_bFile(seq), sep = "/"))
} else {
# Sequence url
return(paste(OEIS_url, seq, sep = "/"))
}
}
# Dedekind Psi Function
my_sequence <- "A001615"
OEIS_bFile(my_sequence)
OEIS_sequence_url(my_sequence)
my_bFile <- OEIS_sequence_url(my_sequence, bFile = TRUE)
data <- read.csv(my_bFile,
header = FALSE,
sep = " ",
col.names = c("n", my_sequence)
)
#View(data)
ggplot(data, aes(x = n, y = eval(parse(text = my_sequence)))) +
geom_point(size = .1, colour = "red") +
ylab(my_sequence)
remove.packages("manipulate")
install.packages("manipulate")
library(ggplot2)
my_labels <- expression(0, pi / 2, pi, 3 * pi / 4, 2 * pi)
ggplot(data.frame(x = c(0, 2*pi)), aes(x)) +
stat_function(fun = sin, colour = "red", size = 2) +
stat_function(fun = cos, colour = "blue", size = 2) +
scale_x_continuous(breaks = 0:4  * pi / 2,
labels = my_labels) +
ylab("f(x)")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<- lm( y ~ x - 1 )
summary(fit) # 0.8263
fit$coefficients
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit) # -5.3445
fit$coefficients
library(ggplot2)
ggplot(fit, aec(x = mpg, y = wt)) +
geom_line()
ggplot(fit, aes(x = mpg, y = wt)) +
geom_line()
ggplot(fit, aes(x = mpg, y = wt)) +
geom_point()
ggplot(fit, aes(x = mpg, y = wt)) +
geom_point()
ggplot(fit, aes(x = mpg, y = wt)) +
geom_point() +
stat_smooth(method="lm", se=FALSE)
fit$coefficients
ggplot(fit, aes(x = mpg, y = wt)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
corOfYandX <- 0.5
sdYoverX <- 2
beta1 <- corOfYandX*sdYoverX
beta1 # 1
library(AppliedPredictiveModeling)
librar(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(swirl)
swirl()
2
swirl()
swirl()
install_from_swirl("Regression Models")
rm(list=ls())
library(swirl)
swirl()
detach("package:swirl", unload=TRUE)
remove.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("Regression_Models")
uninstall_course("Regression_Models")
uninstall_course("Regression Models")
swirl()
remove.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R_Programming")
library(dplyr)
library(tidyr)
library(ggplot2)
entalp.file <- "ENTALP.CSV"
entalp.data <- read.csv(entalp.file,
dec = ",",
sep = ";"
)
View(entalp.data)
library(swirl)
which_course="R Programming")
install_course_zip("C:/CODE/R/R-3.2.2/library/swirl/Courses/swirl_courses-master.zip",
multi=TRUE,
which_course="R Programming")
install_course_zip("C:/CODE/R/R-3.2.2/library/swirl/Courses/swirl_courses-master.zip",
multi=TRUE,
which_course="R Programming")
install_course_zip("C:/CODE/R/R-3.2.2/library/swirl/Courses/swirl_courses-master.zip",
multi=TRUE,
which_course="Regression Models")
swirl()
source('~/.active-rstudio-document', echo=TRUE)
lm(y ~ x)
summary(lm(y ~ x))
lm(y ~ x)$p-value
lm(y ~ x)$Coefficients
lm(y ~ x)$coefficients
lm(y ~ x)$'Pr(>F)'
lm(y ~ x)$coefficients[,4]
lm(y ~ x)$coefficients[ ,3]
lm(y ~ x)$coefficients[ ,2]
lm(y ~ x)$coefficients[4]
lm(y ~ x)$coefficients[1]
lm(y ~ x)$coefficients[2]
fit <- lm(y ~ x)
summary(fit)
coef(summary(fit))
coef(summary(fit))["Pr(>|t|)"]
coef(summary(fit))[,"Pr(>|t|)"]
coef(summary(fit))[2,"Pr(>|t|)"]
coef(summary(fit))[2, "Pr(>|t|)"]
p.value <- coef(summary(fit))[2, "Pr(>|t|)"]
print(p.value)
p.value <- coef(summary(fit))[2, "Pr(>|t|)"]
print(p.value)
p.value
coef(summary(fit))
summary(fit)
coef(summary(fit))
summary(fit)
rse <- summary(fit)$sigma
print(rse)
plot(x,y)
abline(fit,col="red")
remove.packages("manipulate")
install.packages("manipulate")
swirl()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- fit$residuals
varRes <- var(fit$residuals)
varEst <- var(ols.ic + ols.Slope * galton$child)
varEst <- var(ols.ic + ols.slope * galton$child)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
c(1:2, expression)
c(1:3, as.expression)
lapply(c(1:3), as.expression
)
lapply(c(1:3), as.expression)
sapply(c(1:3), as.expression)
apply(c(1:3), as.expression)
apply(c(1:3), FUN=as.expression)
apply(c(1:3),3, FUN=as.expression)
lapply(c(1:3), as.expression)
c(a:v)
c(char(1))
unlist(lapply(c(1:3), expression))
unlist(lapply(c(1:3), expression))
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
unlist(lapply(c(1:4), as.expression), recursive = TRUE)
unlist(lapply(c(1:4), expression), recursive = TRUE)
unlist(lapply(c(1:4), expression), recursive = TRUE)
unlist(lapply(c(1:4), as.expression), recursive = TRUE)
unlist(sapply(c(1:4), as.expression), recursive = TRUE)
unlist(lapply(c(1:4), as.expression), recursive = TRUE)
unlist(lapply(c("a[1]","a[2]"), as.expression), recursive = TRUE)
unlist(lapply(c("a[1]","a[2]"), as.expression), recursive = TRUE)
unlist(lapply(c("a[1]","a[2]"), expression), recursive = TRUE)
unlist(lapply(c("a[1]","a[2]"), as.expression), recursive = TRUE)
unlist(c("a[1]","a[2]"), recursive = TRUE)
for(i in c(1:3)){
print(i)
}
for(i in c(1:3)){
print(expression(i))
}
c(1:3, expression)
c(1:3, expression)
c(1:3, "expression")
x<-1:30
x
which(x %% 5 == 0)
sapply(1:3, function(x) expression(x))
lapply(1:3, function(x) expression(x))
seq(from = 4.5, to = 2.5, by = -0.5)
seq(from = 4, to = 2.5, by = -0.5)
seq(from = 4, to = 2.5, by = -0.33)
rep(expression, 3)
rep(2, 3)
ChemmineR
install.packages("ChemmineR")
setwd("C:/CODE/mycode/02-PROJECT1500/09-myprojects/05-EXPLOCAL/Explocal-GIT/docs/tbexcel/csv")
source('C:/CODE/mycode/02-PROJECT1500/09-myprojects/05-EXPLOCAL/Explocal-GIT/docs/tbexcel/csv/EXPLOCAL.R', echo=TRUE)
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 1500, y = 7.5, label = "frac(P[CO], P[H*2*O]) * frac(P[CO2], P[H2])" , parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 1500, y = 7.5, label = "K[1] == frac(P[CO], P[H*2*O]) * frac(P[CO2], P[H2])" , parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = "K[1] == frac(P[CO], P[H*2*O]) * frac(P[CO2], P[H2])" , parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot2 <- "K[1] == frac(P[CO], P[H*2*O]) * frac(P[CO2], P[H2])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot2 <- "K[1] == frac(P[CO], P[H*2*O]) * frac(P[CO2], P[H2])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
label.k1.plot2 <- "K[1] == frac(P[CO], P[H_2*O]) * frac(P[CO2], P[H2])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot2 <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO2], P[H2])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot2 <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H2])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
label.k1.plot <- latex2exp("$K_{1} = P_{CO} . P_{H_{2}O}/P_{CO_{2}} . P_{H_{2}}$")
label.k1.plot2 <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(label.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot2, parse = TRUE) +
geom_line()
ylab.k1.plot <- "K[1]"
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- "K[1]"
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(expression(ylab.k1.plot)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(expression(ylab.k1.plot)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(expression(ylab.k1.plot)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotexpression(ate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotexpression(ate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE)) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- as.expression("K[1]")
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- as.expression(K[1])
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ylab.k1.plot <- expression(K[1])
label.k1.plot <- "K[1] == frac(P[CO], P[H[2]*O]) * frac(P[CO[2]], P[H[2]])"
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
opts(axis.title.y = theme_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme_text(angle = 0)) +
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme_text(angle = 0)) +
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme_text(angle = 0) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
element_text(angle = 0) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme(axis.title.y = element_text(angle=0)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line()
("$K_{2} = P_{CO}^2/P_{CO_2}$")
label.k2.plot <- latex2exp("$K_{2} = P_{CO}^2/P_{CO_2}$")
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(label.k2.plot) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(label.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
geom_line()
ylab.k2.plot <- expression(K[2])
label.k2.plot <- latex2exp("$K_{2} = P_{CO}^2/P_{CO_2}$")
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
geom_line()
ylab.k2.plot <- expression(K[2])
label.k2.plot <- "K[2] == frac(P[CO]^2, P[CO[2]]")
ylab.k2.plot <- expression(K[2])
label.k2.plot <- "K[2] == frac(P[CO]^2, P[CO[2]]"
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k2.plot, parse = TRUE) +
geom_line()
ylab.k2.plot <- expression(K[2])
label.k2.plot <- "K[2] == frac(P[CO]*^2, P[CO[2]]"
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k2.plot, parse = TRUE) +
geom_line()
ylab.k2.plot <- expression(K[2])
label.k2.plot <- "K[2] == frac(P[CO]^2, P[CO[2]])"
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k2.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 2000, y = 5000, label = label.k2.plot, parse = TRUE) +
geom_line()
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 2000, y = 5000, label = label.k2.plot, parse = TRUE) +
geom_line(colour = "red")
ggplot(k1.data, aes(x = TEMP, y = K2)) +
xlab("Temperature (K)") +
ylab(ylab.k2.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 2000, y = 5000, label = label.k2.plot, parse = TRUE) +
geom_line(size = 1, colour = "red")
ggplot(k1.data, aes(x = TEMP, y = K1)) +
xlab("Temperature (K)") +
ylab(ylab.k1.plot) +
theme(axis.title.y = element_text(angle = 0)) +
annotate("text", x = 4000, y = 3.5, label = label.k1.plot, parse = TRUE) +
geom_line(size = 1, colour = "blue")
